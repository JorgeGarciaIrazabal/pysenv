{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Senv \u00b6 Senv (Super Environment) is a tool to simplify dependency management , packaging , distribution , and consumption of your applications and libraries. It tries to solve most of the problems solved by the amazing application Poetry , but adding important features for modern packaging and distribution needs. Some of these needs are: Support for building conda or poetry environments with the same pyproject.toml file Publish libraries in pypi and/or conda repositories with just one command Distribution of locked applications (Applications like pipx and condax will benefit from it) Totally hermetic appp installation process. Use senvx (standalone executable) to install your application in systems where you don't have any control (no python, no docker, etc), senvx will temporarily install all required dependencies needed and create a hermetic working environment for your application. Installation \u00b6 $ pip install senv ---> 100% Successfully installed senv or even better with senvx \u00b6 $ curl { senv_url } --output senv $ senvx install senv-locked ---> 100% Successfully installed senv Getting started \u00b6 start creating a pyproject.toml file for your project. The init command will ask you simple questions about your project to get you starting $ senv init // It prompts for the project's name # Project ' s name [{ project_dir_name }] : $ your_project // (if conda is not found) # Install conda [ Y/n ] : $ Y // default build system # Default build system [ CONDA, poetry ] : $ conda ---> 100% pyproject.toml created Add dependencies and dev-dependencies to pyproject.toml \u00b6 senv uses the same pyptoject.toml structure as poetry . [tool.senv.dependencies] python = \">3.7.0, <3.10.0\" typer = \"^0.3.2\" [tool.senv.dev-dependencies] pytest = \"^6.2.1\" [tool.senv] build-system = \"conda\" It actually supports using tool.poetry.{any_key} and plugins like poetry-dynamic-versioning should work with senv too. [tool.poetry.dependencies] python = \">3.7.0, <3.10.0\" typer = \"^0.3.2\" [tool.poetry.dev-dependencies] pytest = \"^6.2.1\" # specific senv keys should still be with the keyworkd `senv` [ tool . senv ] build-system = \"conda\" Dev environment \u00b6 Now we are ready to create our first dev environment. Using the conda build-system, it will generate the following lock files: conda-linux-64.lock conda-osx-64.lock conda-win-64.lock You can define this along with the conda channels and other things in the pyproject.toml files (You can find all the options in pyproject ) $ senv venv install generating lockfile for win-64 generating lockfile for osx-64 generating lockfile for linux-64 syncing environment ---> 100% activate your environment running `senv venv shell` Learn more about the venv , config , and package commands","title":"Senv"},{"location":"#welcome-to-senv","text":"Senv (Super Environment) is a tool to simplify dependency management , packaging , distribution , and consumption of your applications and libraries. It tries to solve most of the problems solved by the amazing application Poetry , but adding important features for modern packaging and distribution needs. Some of these needs are: Support for building conda or poetry environments with the same pyproject.toml file Publish libraries in pypi and/or conda repositories with just one command Distribution of locked applications (Applications like pipx and condax will benefit from it) Totally hermetic appp installation process. Use senvx (standalone executable) to install your application in systems where you don't have any control (no python, no docker, etc), senvx will temporarily install all required dependencies needed and create a hermetic working environment for your application.","title":"Welcome to Senv"},{"location":"#installation","text":"$ pip install senv ---> 100% Successfully installed senv","title":"Installation"},{"location":"#or-even-better-with-senvx","text":"$ curl { senv_url } --output senv $ senvx install senv-locked ---> 100% Successfully installed senv","title":"or even better with senvx"},{"location":"#getting-started","text":"start creating a pyproject.toml file for your project. The init command will ask you simple questions about your project to get you starting $ senv init // It prompts for the project's name # Project ' s name [{ project_dir_name }] : $ your_project // (if conda is not found) # Install conda [ Y/n ] : $ Y // default build system # Default build system [ CONDA, poetry ] : $ conda ---> 100% pyproject.toml created","title":"Getting started"},{"location":"#add-dependencies-and-dev-dependencies-to-pyprojecttoml","text":"senv uses the same pyptoject.toml structure as poetry . [tool.senv.dependencies] python = \">3.7.0, <3.10.0\" typer = \"^0.3.2\" [tool.senv.dev-dependencies] pytest = \"^6.2.1\" [tool.senv] build-system = \"conda\" It actually supports using tool.poetry.{any_key} and plugins like poetry-dynamic-versioning should work with senv too. [tool.poetry.dependencies] python = \">3.7.0, <3.10.0\" typer = \"^0.3.2\" [tool.poetry.dev-dependencies] pytest = \"^6.2.1\" # specific senv keys should still be with the keyworkd `senv` [ tool . senv ] build-system = \"conda\"","title":"Add dependencies and dev-dependencies to pyproject.toml"},{"location":"#dev-environment","text":"Now we are ready to create our first dev environment. Using the conda build-system, it will generate the following lock files: conda-linux-64.lock conda-osx-64.lock conda-win-64.lock You can define this along with the conda channels and other things in the pyproject.toml files (You can find all the options in pyproject ) $ senv venv install generating lockfile for win-64 generating lockfile for osx-64 generating lockfile for linux-64 syncing environment ---> 100% activate your environment running `senv venv shell` Learn more about the venv , config , and package commands","title":"Dev environment"},{"location":"config/","text":"config (c) command \u00b6 Full CLI documentation \u00b6 config_command \u00b6 Usage: senv config [OPTIONS] COMMAND [ARGS]... remove \u00b6 Usage: senv config remove [OPTIONS] KEY:[build-system|conda-channels|conda-path|poetry-path|conda- publish-channel|poetry-publish-repository|venv.conda-lock- platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] Options: KEY:[build-system|conda-channels|conda-path|poetry-path|conda-publish-channel|poetry-publish-repository|venv.conda-lock-platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] [required] set \u00b6 Usage: senv config set [OPTIONS] KEY:[build-system|conda-channels|conda-path|poetry-path|conda- publish-channel|poetry-publish-repository|venv.conda-lock- platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] [VALUE] Options: KEY:[build-system|conda-channels|conda-path|poetry-path|conda-publish-channel|poetry-publish-repository|venv.conda-lock-platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] [required] [VALUE] Value of the setting. For multi value setting like the conda-platforms, separate them with a comma ','","title":"Config"},{"location":"config/#config-c-command","text":"","title":"config (c) command"},{"location":"config/#full-cli-documentation","text":"","title":"Full CLI documentation"},{"location":"config/#config_command","text":"Usage: senv config [OPTIONS] COMMAND [ARGS]...","title":"config_command"},{"location":"config/#remove","text":"Usage: senv config remove [OPTIONS] KEY:[build-system|conda-channels|conda-path|poetry-path|conda- publish-channel|poetry-publish-repository|venv.conda-lock- platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] Options: KEY:[build-system|conda-channels|conda-path|poetry-path|conda-publish-channel|poetry-publish-repository|venv.conda-lock-platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] [required]","title":"remove"},{"location":"config/#set","text":"Usage: senv config set [OPTIONS] KEY:[build-system|conda-channels|conda-path|poetry-path|conda- publish-channel|poetry-publish-repository|venv.conda-lock- platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] [VALUE] Options: KEY:[build-system|conda-channels|conda-path|poetry-path|conda-publish-channel|poetry-publish-repository|venv.conda-lock-platforms|venv.venv-lock-dir|venv.build-system|package-lock-dir] [required] [VALUE] Value of the setting. For multi value setting like the conda-platforms, separate them with a comma ','","title":"set"},{"location":"package/","text":"package (p) command \u00b6 Full CLI documentation \u00b6 package_command \u00b6 Usage: senv package [OPTIONS] COMMAND [ARGS]... build \u00b6 Usage: senv package build [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --python-version TEXT lock \u00b6 Usage: senv package lock [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --platforms TEXT conda platforms, for example osx-64 and/or linux-64 [default: (dynamic)] --based-on-tested-lock-files-template TEXT Create the lock file with the same direct dependencies as the ones pinned in the lock template provided. For conda locks, this template should include `{platform}` so each platform output can be based on the right lock file. More information in {Todo: add link to documentation} --conda-channels TEXT [default: (dynamic)] publish \u00b6 Usage: senv package publish [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --python-version TEXT --build / --no-build [default: False] --repository-url TEXT --username TEXT [env var: SENV_PUBLISHER_USERNAME] --password TEXT [env var: SENV_PUBLISHER_PASSWORD]","title":"Package"},{"location":"package/#package-p-command","text":"","title":"package (p) command"},{"location":"package/#full-cli-documentation","text":"","title":"Full CLI documentation"},{"location":"package/#package_command","text":"Usage: senv package [OPTIONS] COMMAND [ARGS]...","title":"package_command"},{"location":"package/#build","text":"Usage: senv package build [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --python-version TEXT","title":"build"},{"location":"package/#lock","text":"Usage: senv package lock [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --platforms TEXT conda platforms, for example osx-64 and/or linux-64 [default: (dynamic)] --based-on-tested-lock-files-template TEXT Create the lock file with the same direct dependencies as the ones pinned in the lock template provided. For conda locks, this template should include `{platform}` so each platform output can be based on the right lock file. More information in {Todo: add link to documentation} --conda-channels TEXT [default: (dynamic)]","title":"lock"},{"location":"package/#publish","text":"Usage: senv package publish [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --python-version TEXT --build / --no-build [default: False] --repository-url TEXT --username TEXT [env var: SENV_PUBLISHER_USERNAME] --password TEXT [env var: SENV_PUBLISHER_PASSWORD]","title":"publish"},{"location":"pyproject/","text":"pyproject.toml \u00b6 configuration \u00b6","title":"Pyproject.toml"},{"location":"pyproject/#pyprojecttoml","text":"","title":"pyproject.toml"},{"location":"pyproject/#configuration","text":"","title":"configuration"},{"location":"venv/","text":"venv command \u00b6 The venv command manages the creation and management of one or multiple virtual environments for development or ci. Create virtual environment \u00b6 Create your default virtual environment \u00b6 By default, senv will use conda as your build system, and the channel conda-forge . By running $ senv venv install generating lock files ---> 100% installing dependencies with conda ---> 100% Dependencies successfully installed A new virtual environment with your project's name, was created along with the windows, macos, and linux lock files in the venv_locks_dir . This can be configured in the pyproject.toml file, see configure sections Create a poetry environment along with the conda environment \u00b6 $ senv venv install --build-system poetry generating lock file ---> 100% installing dependencies with poetry ---> 100% Dependencies successfully installed in this case, a poetry environment and a poetry.lock file was created Activate your environment \u00b6 You can activate your environment by simply running $ senv venv shell venv activate Or activate using poetry with $ senv venv shell --build-system poetry venv activate This flexibility can potentially be useful if you are planning to distribute you package with pypi and conda and you want to test both cases in CI. Update your environment \u00b6 If you want to update your dependencies (based on the constraints defined in pyproject.toml), you can run the update command $ senv venv update generating lock file ---> 100% installing dependencies with conda ---> 100% Dependencies successfully installed or update both multiple build-systems at the same time $ senv venv update --build-system conda --build-system poetry generating conda lock files ---> 100% installing dependencies with conda ---> 100% generating poetry lock file ---> 100% installing dependencies with poetry ---> 100% Environment susccessfully updated Lock your environment \u00b6 To just update the lock files without updating your environment, use lock # you can also include mulple --build-system like in the command ` update ` $ senv venv lock generating lock file ---> 100% Dependencies successfully installed Configure your virtual environments \u00b6 Full CLI documentation \u00b6 venv_command \u00b6 Usage: senv venv [OPTIONS] COMMAND [ARGS]... install \u00b6 Installs both, the dependencies and the dev-dependencies in a a virtual environment. This venv van be activated with senv venv shell . You can configure where the lock files will be stored with the key `tools.senv.venv.venv-lock-dir Usage: senv venv install [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] lock \u00b6 Usage: senv venv lock [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --platforms TEXT conda platforms, for example osx-64 or linux-64 [default: (dynamic)] shell \u00b6 Usage: senv venv shell [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] sync \u00b6 Syncs the current venv with the lock files. Installs the missing dependencies and removes the ones that are not in the lock file Usage: senv venv sync [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] update \u00b6 Updates the lock files and install the dependencies in your venv based on the constrains defined in the pyproject.toml Usage: senv venv update [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --platforms TEXT conda platforms, for example osx-64 or linux-64 [default: (dynamic)]","title":"Venv"},{"location":"venv/#venv-command","text":"The venv command manages the creation and management of one or multiple virtual environments for development or ci.","title":"venv command"},{"location":"venv/#create-virtual-environment","text":"","title":"Create virtual environment"},{"location":"venv/#create-your-default-virtual-environment","text":"By default, senv will use conda as your build system, and the channel conda-forge . By running $ senv venv install generating lock files ---> 100% installing dependencies with conda ---> 100% Dependencies successfully installed A new virtual environment with your project's name, was created along with the windows, macos, and linux lock files in the venv_locks_dir . This can be configured in the pyproject.toml file, see configure sections","title":"Create your default virtual environment"},{"location":"venv/#create-a-poetry-environment-along-with-the-conda-environment","text":"$ senv venv install --build-system poetry generating lock file ---> 100% installing dependencies with poetry ---> 100% Dependencies successfully installed in this case, a poetry environment and a poetry.lock file was created","title":"Create a poetry environment along with the conda environment"},{"location":"venv/#activate-your-environment","text":"You can activate your environment by simply running $ senv venv shell venv activate Or activate using poetry with $ senv venv shell --build-system poetry venv activate This flexibility can potentially be useful if you are planning to distribute you package with pypi and conda and you want to test both cases in CI.","title":"Activate your environment"},{"location":"venv/#update-your-environment","text":"If you want to update your dependencies (based on the constraints defined in pyproject.toml), you can run the update command $ senv venv update generating lock file ---> 100% installing dependencies with conda ---> 100% Dependencies successfully installed or update both multiple build-systems at the same time $ senv venv update --build-system conda --build-system poetry generating conda lock files ---> 100% installing dependencies with conda ---> 100% generating poetry lock file ---> 100% installing dependencies with poetry ---> 100% Environment susccessfully updated","title":"Update your environment"},{"location":"venv/#lock-your-environment","text":"To just update the lock files without updating your environment, use lock # you can also include mulple --build-system like in the command ` update ` $ senv venv lock generating lock file ---> 100% Dependencies successfully installed","title":"Lock your environment"},{"location":"venv/#configure-your-virtual-environments","text":"","title":"Configure your virtual environments"},{"location":"venv/#full-cli-documentation","text":"","title":"Full CLI documentation"},{"location":"venv/#venv_command","text":"Usage: senv venv [OPTIONS] COMMAND [ARGS]...","title":"venv_command"},{"location":"venv/#install","text":"Installs both, the dependencies and the dev-dependencies in a a virtual environment. This venv van be activated with senv venv shell . You can configure where the lock files will be stored with the key `tools.senv.venv.venv-lock-dir Usage: senv venv install [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)]","title":"install"},{"location":"venv/#lock","text":"Usage: senv venv lock [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --platforms TEXT conda platforms, for example osx-64 or linux-64 [default: (dynamic)]","title":"lock"},{"location":"venv/#shell","text":"Usage: senv venv shell [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)]","title":"shell"},{"location":"venv/#sync","text":"Syncs the current venv with the lock files. Installs the missing dependencies and removes the ones that are not in the lock file Usage: senv venv sync [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)]","title":"sync"},{"location":"venv/#update","text":"Updates the lock files and install the dependencies in your venv based on the constrains defined in the pyproject.toml Usage: senv venv update [OPTIONS] Options: --build-system [conda|poetry] [default: (dynamic)] --platforms TEXT conda platforms, for example osx-64 or linux-64 [default: (dynamic)]","title":"update"}]}